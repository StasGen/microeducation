{"version":3,"sources":["App.tsx","ImageControl.tsx","Rating.tsx","RatingControl.tsx","ratingControlTester.ts","index.tsx"],"names":["s","MaterialTextControl","Unwrapped","imageControlTester","rankWith","and","isStringControl","scopeEndsWith","withJsonFormsControlProps","props","schema","Grid","container","style","maxWidth","src","data","Rating","id","value","updateValue","useState","hoverAt","setHoverAt","className","InputLabel","shrink","marginTop","cursor","fontSize","map","i","fullStars","onMouseOver","onMouseOut","onClick","handleChange","path","newValue","handleDefaultsAjv","createAjv","useDefaults","useStyles","makeStyles","episodeDescription","textAlign","overflowY","textOverflow","display","storyDescription","fauxButton","textTransform","padding","width","height","title","dataContent","overflow","justifyContent","borderRadius","backgroundColor","marginBottom","maxHeight","resetButton","margin","demoform","initialData","localStorage","getItem","JSON","parse","renderers","materialRenderers","tester","ratingControlTester","renderer","RatingControl","imageControl","App","classes","setData","stringifiedData","useMemo","stringify","useEffect","setItem","preview","params","setParams","console","log","displayBound","setDisplayBound","renderCourses","courses","c","currentParams","item","Button","course","episode","Card","sx","raised","CardMedia","component","image","card","imageURL","alt","CardContent","Typography","gutterBottom","variant","color","description","episodes","length","renderEpisodes","courseNumber","e","stories","renderStories","episodeNumber","content","illustrationURL","header","text","Preview","direction","xs","Course","Episode","spacing","sm","TextField","multiline","onChange","event","target","uischema","cells","materialCells","errors","formData","positionedData","ep","position","st","j","stringifiedWithGenerationFormData","replaceAll","uuidv4","generationFormData","stringifiedFormData","setDataWithGeneration","ajv","theme","createTheme","components","MuiFormControl","styleOverrides","root","ReactDOM","render","ThemeProvider","CssBaseline","document","getElementById"],"mappings":"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","file":"static/js/main.b0349f0a.chunk.js","sourcesContent":["\nimport imageControl, {\n  imageControlTester,\n} from './ImageControl';\n\n\nimport { Fragment, useState, useMemo, useEffect } from 'react';\nimport { JsonForms } from '@jsonforms/react';\nimport Grid from '@mui/material/Grid';\nimport Button from '@mui/material/Button';\nimport Typography from '@mui/material/Typography';\nimport TextField from '@mui/material/TextField';\nimport logo from './logo.svg';\nimport './App.css';\nimport schema from './schema.json';\nimport uischema from './uischema.json';\nimport { UISchemaElement } from '@jsonforms/core';\nimport {\n  materialCells,\n  materialRenderers,\n} from '@jsonforms/material-renderers';\nimport RatingControl from './RatingControl';\nimport ratingControlTester from './ratingControlTester';\nimport { makeStyles } from '@mui/styles';\nimport { createAjv } from '@jsonforms/core';\nimport { Generate } from '@jsonforms/core';\nimport { v4 as uuidv4 } from 'uuid';\nimport React, { useRef, useLayoutEffect, memo } from 'react';\nimport {\n  BrowserRouter,\n  Routes,\n  Route,\n  useLocation,\n  useMatch,\n  useResolvedPath\n} from \"react-router-dom\";\nimport Card from '@mui/material/Card';\nimport CardActions from '@mui/material/CardActions';\nimport CardContent from '@mui/material/CardContent';\nimport CardMedia from '@mui/material/CardMedia';\n\nconst important = <T extends string>(s: T): T => `${s} !important` as T;\n\nconst handleDefaultsAjv = createAjv({useDefaults: true});\n\nconst useStyles = makeStyles({\n  episodeDescription: {\n    textAlign: 'left',\n    overflowY: \"auto\",\n   textOverflow: \"ellipsis\",\n   display: \"-webkit-box\",\n   \"-webkit-line-clamp\": 5, /* number of lines to show */\n           \"line-clamp\": 5, \n   \"-webkit-box-orient\": \"vertical\"\n  },\n  storyDescription: {\n   textAlign: 'left',\n   overflowY: \"auto\",\n   textOverflow: \"ellipsis\",\n   display: \"-webkit-box\",\n   \"-webkit-line-clamp\": 15, /* number of lines to show */\n           \"line-clamp\": 15, \n   \"-webkit-box-orient\": \"vertical\"\n  },\n  fauxButton: {\n    textTransform: important(\"none\")\n  },\n  container: {\n    padding: '1em',\n    width: '100%',\n    height: 'auto'\n  },\n  title: {\n    textAlign: 'left',\n  },\n  dataContent: {\n    overflow: 'auto',\n    display: 'flex',\n    justifyContent: 'left',\n    borderRadius: '0.25em',\n    backgroundColor: '#fefefe',\n    marginBottom: '1rem',\n    maxHeight: '300px',\n    width: '100%'\n  },\n  resetButton: {\n    margin: 'auto !important',\n    display: 'block !important',\n  },\n  demoform: {\n    margin: 'auto',\n    padding: '1rem',\n  },\n});\n\nconst initialData = (localStorage.getItem('initial-data'))?JSON.parse(localStorage.getItem('initial-data')!):{};\n\n\nconst renderers = [\n  ...materialRenderers,\n  //register custom renderers\n  { tester: ratingControlTester, renderer: RatingControl },\n  {\n    tester: imageControlTester,\n    renderer: imageControl,\n  }\n];\n\nconst modifiedData = (s: string):string => {return s.replaceAll(/\\$uuid/g,uuidv4())};\n\nconst App = () => {\n  const classes = useStyles();\n  const [data, setData] = useState<any>(initialData);\n  const stringifiedData = useMemo(() => JSON.stringify(data, null, 2), [data]);\n\n  useEffect(() => {\n  localStorage.setItem('initial-data', JSON.stringify(data));\n}, [data]);\n\n  const setDataWithGeneration = (formData:any) => {\n    let positionedData = formData;\n    if (positionedData.courses) positionedData.courses = positionedData.courses.map((c:any)=>{if (c.episodes) c.episodes.map((ep:any,i:number)=>{ep.position=i; if (ep.stories) ep.stories = ep.stories.map((st:any,j:number)=>{st.position=j; return st}); return ep});return c});\n    let stringifiedWithGenerationFormData = JSON.stringify(positionedData).replaceAll(/\\$uuid/g,uuidv4());\n    let generationFormData = JSON.parse(stringifiedWithGenerationFormData);\n    let stringifiedFormData = JSON.stringify(formData);\n    (stringifiedFormData != stringifiedWithGenerationFormData) ? setData(generationFormData) : setData(formData);\n  }\n\nconst [params, setParams] = useState<any>({preview: false});\n\n\nfunction togglePreview(){\n  params.preview = !params.preview;\n  setParams({...params});\n  \n}\n\nconsole.log(JSON.stringify(params));\n\n  const clearData = () => {\n    setData({});\n  };\n\n  \n\nconst [displayBound, setDisplayBound] = useState<boolean>(true);\nconst toggleJSONView = () => {setDisplayBound(!displayBound)};\n\n// function Main(){\n//   return (\n    \n//   );\n// }\n\nfunction renderCourses(courses:any){\n   if (courses) return ( courses.map((c:any, i:number)=>{\n     let currentParams = params;\n      return(\n        <Grid item>\n\n          <Button className={classes.fauxButton}\n          onClick={()=>{currentParams.course=\"\"+i;currentParams.episode=null;setParams({...currentParams});console.log(currentParams)}}\n          >\n            {/*{c.flowTopic}*/}\n            <Card sx={{ maxWidth: 345 }} raised={i==params.course}>\n      <CardMedia\n        component=\"img\"\n        height=\"140\"\n        image={c.card.imageURL}\n        alt=\"green iguana\"\n      />\n      <CardContent>\n        <Typography gutterBottom variant={'h6'} className={classes.title} component=\"div\">\n          {c.card.title}\n        </Typography>\n        <Typography variant={'body1'} className={classes.title} color=\"text.secondary\">\n          {c.card.description}\n        </Typography>\n        <Typography variant={'body2'} className={classes.title} color=\"text.secondary\">\n          Episodes: {c.episodes?.length||0}\n        </Typography>\n      </CardContent>\n    </Card>\n          </Button>\n\n            </Grid>\n        );\n    })\n   );\n}\n\nfunction renderEpisodes(episodes:any, courseNumber:string){    \n  let currentParams = params;\n   if (episodes) return ( episodes.map((e:any, i:number)=>{\n      return(\n        <Grid item>\n\n          <Button className={classes.fauxButton}\n          onClick={()=>{currentParams.episode=\"\"+i;setParams({...currentParams});console.log(currentParams)}}\n          >\n            \n\n            <Card sx={{ maxWidth: 345 }} raised={i==params.episode}>\n      <CardContent>\n        <Typography gutterBottom variant={'h6'} className={classes.title} component=\"div\">\n          {e.title}\n        </Typography>\n        <Typography variant={'caption'} className={classes.episodeDescription} color=\"text.secondary\">\n          {e.description}\n        </Typography>\n        <Typography variant={'caption'} className={classes.title} color=\"text.secondary\">\n          Stories: {e.stories?.length||0}\n        </Typography>\n      </CardContent>\n    </Card>\n          </Button>\n\n            </Grid>\n        );\n    })\n   );\n}\n\nfunction renderStories(stories:any, episodeNumber:string){    \n   if (stories) return ( stories.map((s:any, i:number)=>{\n      return(\n        <Grid item>\n          <Button className={classes.fauxButton}>\n            {/*{s.id}*/}\n            <Card sx={{ maxWidth: 250 }}>\n      <CardMedia\n        component=\"img\"\n        height=\"200\"\n        image={s.content.illustrationURL}\n        alt=\"green iguana\"\n      />\n      <CardContent>\n        <Typography gutterBottom variant={'h6'} className={classes.title} component=\"div\">\n          {s.content.header}\n        </Typography>\n        <Typography variant={'caption'} className={classes.storyDescription} color=\"text.secondary\">\n          {s.content.text}\n        </Typography>\n      </CardContent>\n    </Card>\n          </Button>\n            </Grid>\n        );\n    })\n   );\n}\n\nfunction Preview(){\n  let courses = data.courses;\n  console.log(courses);\n   return (\n       <Grid container direction=\"row\" xs={12}>\n      {/*<a> {JSON.stringify(courses, null, 2)} </a>*/}\n      \n      <Grid container>\n      <a> {JSON.stringify(params)} </a>\n      </Grid>\n      <Grid\n      item\n      direction=\"column\"\n      xs={2}\n      >\n      {renderCourses(courses)}\n      </Grid>\n      <Grid\n      item\n      direction=\"column\"\n      xs={2}\n      >\n      <Course/>\n      </Grid>\n      <Grid\n      item\n      direction=\"column\"\n      xs={8}\n      >\n      <Episode/>\n      </Grid>\n      \n</Grid>\n   );\n\n\n\n}\n\nfunction Course(){\n  let currentParams = params;\n  console.log(\"cp:\"+JSON.stringify(currentParams));\n  if (currentParams.course){ \n  let {episodes} = data.courses[currentParams.course||0];\n  console.log(episodes);\n   if (currentParams.course) return (\n <Grid>\n    {/* <a> {JSON.stringify(episodes, null, 2)} </a> */}\n    <Grid\n    container\n    direction=\"column\"\n    >\n    {!!params.course?renderEpisodes(episodes,currentParams.course):null}\n    </Grid>\n    </Grid>\n   );\n }\n    return(null);\n\n\n\n}\n\nfunction Episode(){\n  console.log(params);\n  if (params.episode&&params.course){  \n  let stories = data.courses[params.course||0].episodes[params.episode||0]!.stories;\n  console.log(stories);\n   return (\n <Grid>\n    {/* <a> {JSON.stringify(stories, null, 2)} </a>/ */}\n    <Grid\n    item\n    direction=\"row\"\n    container\n    >\n    {renderStories(stories,params.episode)}\n    </Grid>\n    </Grid>\n   );\n }\n    return(null);\n\n\n\n}\n\n\nreturn (\n\n<Fragment>\n<Typography variant={'h6'} className={classes.title}>\n            Adminka Last Update: 20:31, 8 Jul, 2022\n          </Typography>\n<Grid container direction=\"row\">\n      <Grid\n        // container\n        item\n        direction=\"column\"\n        justifyContent=\"center\"\n        spacing={2}\n        className={classes.container}\n        xs={params.preview?4:12}\n      >\n        <Grid item sm={6}>\n          {displayBound && <Typography variant={'h4'} className={classes.title}>\n            JSON\n          </Typography>}\n           {displayBound &&  <TextField\n            className={classes.dataContent}\n            id='boundData'\n            multiline\n            variant=\"outlined\" \n            value={stringifiedData}\n            onChange={(event)=>{ setData(JSON.parse(event.target.value));}}\n            >\n            </TextField> }\n          <Grid\n          container\n          justifyContent=\"center\"\n          direction=\"row\"\n          spacing={2}\n          >\n          <Grid item>\n          <Button\n            onClick={clearData}\n            color='primary'\n            variant='contained'\n          >\n            Clear data\n          </Button>\n          </Grid>\n          <Grid item>\n          <Button\n            onClick={toggleJSONView}\n            color='secondary'\n            variant='contained'\n          >\n            {!displayBound?'Show':'Hide'} JSON\n          </Button>\n          </Grid>\n          <Grid item>\n\n          <Button\n            color='success'\n            variant='contained'\n            onClick={togglePreview}\n          >\n            Preview\n          </Button>\n\n          </Grid>\n          </Grid>\n        </Grid>\n        <Grid\n        item\n        xs\n        >\n          <Typography variant={'h4'} className={classes.title}>\n            MicroEd Form\n          </Typography>\n          {!params.preview && <div className={classes.demoform}>\n            <JsonForms\n              schema={schema}\n              uischema={uischema}\n              data={data}\n              renderers={renderers}\n              cells={materialCells}\n              onChange={({ errors, data }) => {\n               setDataWithGeneration(data);\n              }}\n              ajv={handleDefaultsAjv}\n            />\n          </div>}\n        </Grid>\n      </Grid>\n      <Grid\n      item\n      // container\n      direction=\"row\"\n      xs={8}>\n      {params.preview&&<Preview />}\n      </Grid>\n      </Grid>\n    </Fragment>\n\n  );\n{/*return (\n    <BrowserRouter>\n      <Routes>\n        <Route path=\"/\" element={\n<Fragment>\n      <Grid\n        container\n        direction=\"column\"\n        justifyContent=\"center\"\n        spacing={2}\n        className={classes.container}\n      >\n        <Grid item sm={6}>\n          {displayBound && <Typography variant={'h4'} className={classes.title}>\n            JSON\n          </Typography>}\n           {displayBound &&  <TextField\n            className={classes.dataContent}\n            id='boundData'\n            multiline\n            variant=\"outlined\" \n            value={stringifiedData}\n            onChange={(event)=>{ setData(JSON.parse(event.target.value));}}\n            >\n            </TextField> }\n          <Grid\n          container\n          justifyContent=\"center\"\n          direction=\"row\"\n          spacing={2}\n          >\n          <Grid item>\n          <Button\n            onClick={clearData}\n            color='primary'\n            variant='contained'\n          >\n            Clear data\n          </Button>\n          </Grid>\n          <Grid item>\n          <Button\n            onClick={toggleJSONView}\n            color='secondary'\n            variant='contained'\n          >\n            {!displayBound?'Show':'Hide'} JSON\n          </Button>\n          </Grid>\n          <Grid item>\n          <Link to=\"preview\" style={{ textDecoration: 'none' }}>\n          <Button\n            color='secondary'\n            variant='contained'\n          >\n            Preview\n          </Button>\n          </Link>\n          </Grid>\n          </Grid>\n        </Grid>\n        <Grid item sm={6}>\n          <Typography variant={'h4'} className={classes.title}>\n            MicroEd Form\n          </Typography>\n          <div className={classes.demoform}>\n            <JsonForms\n              schema={schema}\n              uischema={uischema}\n              data={data}\n              renderers={renderers}\n              cells={materialCells}\n              onChange={({ errors, data }) => {\n               setDataWithGeneration(data);\n              }}\n              ajv={handleDefaultsAjv}\n            />\n          </div>\n        </Grid>\n      </Grid>\n    </Fragment>\n        } />\n        <Route path=\"/preview\" element={<Preview />} />\n        <Route path=\"/preview/:course/\">\n          <Route path=\":episode\" element={<Preview />} />\n          <Route path=\"\" element={<Preview />} />\n        </Route>\n      </Routes>\n    </BrowserRouter>\n  );\n*/}\n\n};\n\n\nexport default App;\n","import {\n  JsonSchema,\n  ControlProps,\n  isStringControl,\n  RankedTester,\n  rankWith,\n  schemaMatches,\n  scopeEndsWith,\n  and,\n} from '@jsonforms/core';\nimport { Grid, Typography } from '@mui/material';\nimport { Unwrapped } from '@jsonforms/material-renderers';\nimport { withJsonFormsControlProps } from '@jsonforms/react';\nconst { MaterialTextControl } = Unwrapped;\n\n\nexport const imageControl = (props: ControlProps) => {\n\tconst schema = props.schema as JsonSchema;\n  return (\n    <Grid container>\n\n        <img style={{ maxWidth: 250 }} src={props.data}></img>\n        <MaterialTextControl {...props}/>\n\n    </Grid>\n  );\n};\n\n\nexport const imageControlTester: RankedTester = rankWith(\n  5,\n  and(\n    isStringControl,\n    scopeEndsWith('URL')\n  )\n);\nexport default withJsonFormsControlProps(imageControl);","import React from 'react';\nimport { useState } from 'react';\nimport { InputLabel } from '@mui/material';\n\ninterface RatingProps {\n  id?: string;\n  value: number;\n  updateValue: (newValue: number) => void;\n}\n\nexport const Rating: React.FC<RatingProps> = ({ id, value, updateValue }) => {\n  const [hoverAt, setHoverAt] = useState<number | null>(null);\n\n  return (\n    <div id='#/properties/rating' className='rating'>\n      <InputLabel shrink style={{ marginTop: '0.8em' }}>Rating</InputLabel>\n      <div style={{ cursor: 'pointer', fontSize: '18px' }}>\n        {[0, 1, 2, 3, 4].map((i) => {\n          const fullStars = hoverAt ?? value;\n\n          return (\n            <span\n              onMouseOver={() => setHoverAt(i + 1)}\n              onMouseOut={() => setHoverAt(null)}\n              onClick={() => updateValue(i + 1)}\n              key={`${id}_${i}`}\n            >\n              {i < fullStars ? '\\u2605' : '\\u2606'}\n            </span>\n          );\n        })}\n      </div>\n    </div>\n  );\n};\n","import { withJsonFormsControlProps } from '@jsonforms/react';\nimport { Rating } from './Rating';\n\ninterface RatingControlProps {\n  data: any;\n  handleChange(path: string, value: any): void;\n  path: string;\n}\n\nconst RatingControl = ({ data, handleChange, path }: RatingControlProps) => (\n  <Rating\n    value={data}\n    updateValue={(newValue: number) => handleChange(path, newValue)}\n  />\n);\n\nexport default withJsonFormsControlProps(RatingControl);\n","import { rankWith, scopeEndsWith } from '@jsonforms/core';\n\nexport default rankWith(\n  3, //increase rank as needed\n  scopeEndsWith('rating')\n);\n","import { createTheme, CssBaseline, ThemeProvider } from '@mui/material';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\n/**\n * Customize form so each control has more space\n */\nconst theme = createTheme({\n  components: {\n    MuiFormControl: {\n      styleOverrides: {\n        root: {\n          margin: '0.8em 0',\n        },\n      }\n    },\n  },\n});\n\nReactDOM.render(\n  <ThemeProvider theme={theme}>\n    <CssBaseline />\n    <App />\n  </ThemeProvider>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}