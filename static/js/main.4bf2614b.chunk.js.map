{"version":3,"sources":["Rating.tsx","RatingControl.tsx","ratingControlTester.ts","App.tsx","index.tsx"],"names":["Rating","id","value","updateValue","useState","hoverAt","setHoverAt","className","InputLabel","shrink","style","marginTop","cursor","fontSize","map","i","fullStars","onMouseOver","onMouseOut","onClick","withJsonFormsControlProps","data","handleChange","path","newValue","rankWith","scopeEndsWith","handleDefaultsAjv","createAjv","useDefaults","useStyles","makeStyles","container","padding","width","height","title","textAlign","dataContent","overflow","display","justifyContent","borderRadius","backgroundColor","marginBottom","maxHeight","resetButton","margin","demoform","initialData","renderers","materialRenderers","tester","ratingControlTester","renderer","RatingControl","App","classes","setData","stringifiedData","useMemo","JSON","stringify","displayBound","setDisplayBound","Grid","direction","spacing","item","sm","Typography","variant","TextField","multiline","onChange","event","parse","target","Button","color","schema","uischema","cells","materialCells","errors","formData","positionedData","courses","c","episodes","ep","position","stories","st","j","stringifiedWithGenerationFormData","replaceAll","uuidv4","generationFormData","stringifiedFormData","setDataWithGeneration","ajv","theme","createTheme","components","MuiFormControl","styleOverrides","root","ReactDOM","render","ThemeProvider","CssBaseline","document","getElementById"],"mappings":"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","file":"static/js/main.4bf2614b.chunk.js","sourcesContent":["import React from 'react';\nimport { useState } from 'react';\nimport { InputLabel } from '@mui/material';\n\ninterface RatingProps {\n  id?: string;\n  value: number;\n  updateValue: (newValue: number) => void;\n}\n\nexport const Rating: React.FC<RatingProps> = ({ id, value, updateValue }) => {\n  const [hoverAt, setHoverAt] = useState<number | null>(null);\n\n  return (\n    <div id='#/properties/rating' className='rating'>\n      <InputLabel shrink style={{ marginTop: '0.8em' }}>Rating</InputLabel>\n      <div style={{ cursor: 'pointer', fontSize: '18px' }}>\n        {[0, 1, 2, 3, 4].map((i) => {\n          const fullStars = hoverAt ?? value;\n\n          return (\n            <span\n              onMouseOver={() => setHoverAt(i + 1)}\n              onMouseOut={() => setHoverAt(null)}\n              onClick={() => updateValue(i + 1)}\n              key={`${id}_${i}`}\n            >\n              {i < fullStars ? '\\u2605' : '\\u2606'}\n            </span>\n          );\n        })}\n      </div>\n    </div>\n  );\n};\n","import { withJsonFormsControlProps } from '@jsonforms/react';\nimport { Rating } from './Rating';\n\ninterface RatingControlProps {\n  data: any;\n  handleChange(path: string, value: any): void;\n  path: string;\n}\n\nconst RatingControl = ({ data, handleChange, path }: RatingControlProps) => (\n  <Rating\n    value={data}\n    updateValue={(newValue: number) => handleChange(path, newValue)}\n  />\n);\n\nexport default withJsonFormsControlProps(RatingControl);\n","import { rankWith, scopeEndsWith } from '@jsonforms/core';\n\nexport default rankWith(\n  3, //increase rank as needed\n  scopeEndsWith('rating')\n);\n","import { Fragment, useState, useMemo } from 'react';\nimport { JsonForms } from '@jsonforms/react';\nimport Grid from '@mui/material/Grid';\nimport Button from '@mui/material/Button';\nimport Typography from '@mui/material/Typography';\nimport TextField from '@mui/material/TextField';\nimport logo from './logo.svg';\nimport './App.css';\nimport schema from './schema.json';\nimport uischema from './uischema.json';\nimport { UISchemaElement } from '@jsonforms/core';\nimport {\n  materialCells,\n  materialRenderers,\n} from '@jsonforms/material-renderers';\nimport RatingControl from './RatingControl';\nimport ratingControlTester from './ratingControlTester';\nimport { makeStyles } from '@mui/styles';\nimport { createAjv } from '@jsonforms/core';\nimport { Generate } from '@jsonforms/core';\nimport { v4 as uuidv4 } from 'uuid';\nimport React, { useRef, useLayoutEffect } from 'react';\n\n\nconst handleDefaultsAjv = createAjv({useDefaults: true});\n\nconst useStyles = makeStyles({\n  container: {\n    padding: '1em',\n    width: '100%',\n    height: 'auto'\n  },\n  title: {\n    textAlign: 'center',\n    padding: '0.25em',\n  },\n  dataContent: {\n    overflow: 'auto',\n    display: 'flex',\n    justifyContent: 'left',\n    borderRadius: '0.25em',\n    backgroundColor: '#fefefe',\n    marginBottom: '1rem',\n    maxHeight: '300px',\n    width: '100%'\n  },\n  resetButton: {\n    margin: 'auto !important',\n    display: 'block !important',\n  },\n  demoform: {\n    margin: 'auto',\n    padding: '1rem',\n  },\n});\n\nconst initialData = {};\n\nconst renderers = [\n  ...materialRenderers,\n  //register custom renderers\n  { tester: ratingControlTester, renderer: RatingControl },\n];\n\nconst modifiedData = (s: string):string => {return s.replaceAll(/\\$uuid/g,uuidv4())};\n\nconst App = () => {\n  const classes = useStyles();\n  const [data, setData] = useState<any>(initialData);\n  const stringifiedData = useMemo(() => JSON.stringify(data, null, 2), [data]);\n\n  const setDataWithGeneration = (formData:any) => {\n    let positionedData = formData;\n    if (positionedData.courses) positionedData.courses = positionedData.courses.map((c:any)=>{if (c.episodes) c.episodes.map((ep:any,i:number)=>{ep.position=i; if (ep.stories) ep.stories = ep.stories.map((st:any,j:number)=>{st.position=j; return st}); return ep});return c});\n    let stringifiedWithGenerationFormData = JSON.stringify(positionedData).replaceAll(/\\$uuid/g,uuidv4());\n    let generationFormData = JSON.parse(stringifiedWithGenerationFormData);\n    let stringifiedFormData = JSON.stringify(formData);\n    (stringifiedFormData != stringifiedWithGenerationFormData) ? setData(generationFormData) : setData(formData);\n  }\n\n\n\n  const clearData = () => {\n    setData({});\n  };\n\n  \n\nconst [displayBound, setDisplayBound] = useState<boolean>(true);\nconst toggleJSONView = () => {setDisplayBound(!displayBound)};\n\n  return (\n    <Fragment>\n\n      <Grid\n        container\n        direction=\"column\"\n        justifyContent=\"center\"\n        spacing={2}\n        className={classes.container}\n      >\n        <Grid item sm={6}>\n          {displayBound && <Typography variant={'h4'} className={classes.title}>\n            JSON\n          </Typography>}\n           {displayBound &&  <TextField\n            className={classes.dataContent}\n            id='boundData'\n            multiline\n            variant=\"outlined\" \n            value={stringifiedData}\n            onChange={(event)=>{ setData(JSON.parse(event.target.value));}}\n            >\n            </TextField> }\n          <Grid\n          container\n          justifyContent=\"center\"\n          direction=\"row\"\n          spacing={2}\n          >\n          <Grid item>\n          <Button\n            onClick={clearData}\n            color='primary'\n            variant='contained'\n          >\n            Clear data\n          </Button>\n          </Grid>\n          <Grid item>\n          <Button\n            onClick={toggleJSONView}\n            color='secondary'\n            variant='contained'\n          >\n            {!displayBound?'Show':'Hide'} JSON\n          </Button>\n          </Grid>\n          </Grid>\n        </Grid>\n        <Grid item sm={6}>\n          <Typography variant={'h4'} className={classes.title}>\n            MicroEd Form\n          </Typography>\n          <div className={classes.demoform}>\n            <JsonForms\n              schema={schema}\n              uischema={uischema}\n              data={data}\n              renderers={renderers}\n              cells={materialCells}\n              onChange={({ errors, data }) => {\n               setDataWithGeneration(data);\n              }}\n              ajv={handleDefaultsAjv}\n            />\n          </div>\n        </Grid>\n      </Grid>\n    </Fragment>\n  );\n};\n\nexport default App;\n","import { createTheme, CssBaseline, ThemeProvider } from '@mui/material';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\n/**\n * Customize form so each control has more space\n */\nconst theme = createTheme({\n  components: {\n    MuiFormControl: {\n      styleOverrides: {\n        root: {\n          margin: '0.8em 0',\n        },\n      }\n    },\n  },\n});\n\nReactDOM.render(\n  <ThemeProvider theme={theme}>\n    <CssBaseline />\n    <App />\n  </ThemeProvider>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}